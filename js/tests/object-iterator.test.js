"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const object_iterator_1=require("../object-iterator");describe("Basic Object Iteration",()=>{test("Simple Object",()=>{let e=new object_iterator_1.ObjectIterator({name:"Trevor",time:0,money:!1});expect(e.hasNext()).toBeTruthy(),expect(e.next()).toStrictEqual({key:"name",value:"Trevor"}),expect(e.hasNext()).toBeTruthy(),expect(e.next()).toStrictEqual({key:"time",value:0}),expect(e.hasNext()).toBeTruthy(),expect(e.next()).toStrictEqual({key:"money",value:!1}),expect(e.hasNext()).toBeFalsy(),expect(e.next()).toStrictEqual({key:void 0,value:void 0})}),test("[Symbol.iterator]",()=>{let e=new object_iterator_1.ObjectIterator({name:"Trevor",time:0,money:!1}),t=0;for(let a of e){switch(t){case 0:expect(e.hasNext()).toBeTruthy(),expect(a).toStrictEqual({key:"name",value:"Trevor"});break;case 1:expect(e.hasNext()).toBeTruthy(),expect(a).toStrictEqual({key:"time",value:0});break;case 2:expect(e.hasNext()).toBeFalsy(),expect(a).toStrictEqual({key:"money",value:!1});break;default:fail("Switch statement should not reach this case statement.")}t++}})});