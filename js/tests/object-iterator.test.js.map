{"version":3,"sources":["ts/tests/object-iterator.test.ts"],"names":["object_iterator_1","require","describe","test","iter","ObjectIterator","name","time","money","expect","hasNext","toBeTruthy","next","toStrictEqual","key","value","toBeFalsy","undefined","item","kvPair","fail"],"mappings":"oEAMA,MAAAA,kBAAAC,QAAA,sBAEAC,SAAS,yBAA0B,KAElCC,KAAK,gBAAiB,KAErB,IAQIC,EAAuB,IAAIJ,kBAAAK,eARhB,CAEdC,KAAM,SACNC,KAAM,EACNC,OAAO,IAMRC,OAAOL,EAAKM,WAAWC,aACvBF,OAAOL,EAAKQ,QAAQC,cAAc,CAAEC,IAAK,OAAQC,MAAO,WAExDN,OAAOL,EAAKM,WAAWC,aACvBF,OAAOL,EAAKQ,QAAQC,cAAc,CAAEC,IAAK,OAAQC,MAAO,IAExDN,OAAOL,EAAKM,WAAWC,aACvBF,OAAOL,EAAKQ,QAAQC,cAAc,CAAEC,IAAK,QAASC,OAAO,IAEzDN,OAAOL,EAAKM,WAAWM,YACvBP,OAAOL,EAAKQ,QAAQC,cAAc,CAAEC,SAAKG,EAAWF,WAAOE,MAI5Dd,KAAK,oBAAqB,KAEzB,IAQIC,EAAuB,IAAIJ,kBAAAK,eARhB,CAEdC,KAAM,SACNC,KAAM,EACNC,OAAO,IAKJU,EAAe,EAEnB,IAAK,IAAIC,KAAUf,EAAM,CAExB,OAAQc,GAEP,KAAK,EACJT,OAAOL,EAAKM,WAAWC,aACvBF,OAAOU,GAAQN,cAAc,CAAEC,IAAK,OAAQC,MAAO,WACnD,MAED,KAAK,EACJN,OAAOL,EAAKM,WAAWC,aACvBF,OAAOU,GAAQN,cAAc,CAAEC,IAAK,OAAQC,MAAO,IACnD,MAED,KAAK,EACJN,OAAOL,EAAKM,WAAWM,YACvBP,OAAOU,GAAQN,cAAc,CAAEC,IAAK,QAASC,OAAO,IACpD,MAED,QACCK,KAAK,0DAIPF","file":"object-iterator.test.js","sourcesContent":["/*\n *\tCreated by Trevor Sears <trevorsears.main@gmail.com>.\n *\t12:30 AM -- June 16th, 2019.\n *\tProject: iter-over\n */\n\nimport { ObjectIterator } from \"../object-iterator\";\n\ndescribe(\"Basic Object Iteration\", () => {\n\t\n\ttest(\"Simple Object\", () => {\n\t\t\n\t\tlet obj: any = {\n\t\t\t\n\t\t\tname: \"Trevor\",\n\t\t\ttime: 0,\n\t\t\tmoney: false\n\t\t\t\n\t\t};\n\t\t\n\t\tlet iter: ObjectIterator = new ObjectIterator(obj);\n\t\t\n\t\texpect(iter.hasNext()).toBeTruthy();\n\t\texpect(iter.next()).toStrictEqual({ key: \"name\", value: \"Trevor\" });\n\t\t\n\t\texpect(iter.hasNext()).toBeTruthy();\n\t\texpect(iter.next()).toStrictEqual({ key: \"time\", value: 0 });\n\t\t\n\t\texpect(iter.hasNext()).toBeTruthy();\n\t\texpect(iter.next()).toStrictEqual({ key: \"money\", value: false });\n\t\t\n\t\texpect(iter.hasNext()).toBeFalsy();\n\t\texpect(iter.next()).toStrictEqual({ key: undefined, value: undefined });\n\t\t\n\t});\n\t\n\ttest(\"[Symbol.iterator]\", () => {\n\t\t\n\t\tlet obj: any = {\n\t\t\t\n\t\t\tname: \"Trevor\",\n\t\t\ttime: 0,\n\t\t\tmoney: false\n\t\t\t\n\t\t};\n\t\t\n\t\tlet iter: ObjectIterator = new ObjectIterator(obj);\n\t\tlet item: number = 0;\n\t\t\n\t\tfor (let kvPair of iter) {\n\t\t\t\n\t\t\tswitch (item) {\n\t\t\t\t\n\t\t\t\tcase 0:\n\t\t\t\t\texpect(iter.hasNext()).toBeTruthy();\n\t\t\t\t\texpect(kvPair).toStrictEqual({ key: \"name\", value: \"Trevor\" });\n\t\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\tcase 1:\n\t\t\t\t\texpect(iter.hasNext()).toBeTruthy();\n\t\t\t\t\texpect(kvPair).toStrictEqual({ key: \"time\", value: 0 });\n\t\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\tcase 2:\n\t\t\t\t\texpect(iter.hasNext()).toBeFalsy();\n\t\t\t\t\texpect(kvPair).toStrictEqual({ key: \"money\", value: false });\n\t\t\t\t\tbreak;\n\t\t\t\t\t\n\t\t\t\tdefault:\n\t\t\t\t\tfail(\"Switch statement should not reach this case statement.\");\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\titem++;\n\t\t\t\n\t\t}\n\t\t\n\t});\n\t\n});"]}