{"version":3,"sources":["ts/tests/string-line-iterator.test.ts"],"names":["string_line_iterator_1","require","iterator","describe","beforeEach","StringLineIterator","test","returnedValues","forEachRemaining","expect","toBe","next","toBeUndefined","content","result","value","push","join"],"mappings":"oEAMA,MAAAA,uBAAAC,QAAA,2BAUA,IAAIC,SAEJC,SAAS,qBAAsB,KAI9BC,WAAW,KAEVF,SAAW,IAAIF,uBAAAK,mBAJM,kBAQtBC,KAAK,gCAAiC,KAErC,IAAIC,EAAyB,EAE7BL,SAASM,iBAAiB,IAAMD,KAEhCE,OAAOF,GAAgBG,KAAK,KAI7BJ,KAAK,wCAAyC,KAE7CG,OAAOP,SAASS,QAAQD,KApBH,kBAwBtBJ,KAAK,oDAAqD,KAEzDJ,SAASS,OAETF,OAAOP,SAASS,QAAQC,oBAM1BT,SAAS,oBAAqB,KAE7B,IAAIU,EAAkB,wCAItBT,WAAW,KAEVF,SAAW,IAAIF,uBAAAK,mBAAmBQ,KAInCP,KAAK,wCAAyC,KAE7C,IAAIC,EAAyB,EAE7BL,SAASM,iBAAiB,IAAMD,KAEhCE,OAAOF,GAAgBG,KAAK,KAI7BJ,KAAK,wCAAyC,KAE7C,IAAIQ,EAAmB,GAEvBZ,SAASM,iBAAkBO,GAAkBD,EAAOE,KAAKD,IAEzDN,OAAOK,EAAOG,KAAK,OAAOP,KAAKG,KAIhCP,KAAK,oDAAqD,KAEzDJ,SAASS,OACTT,SAASS,OACTT,SAASS,OAETF,OAAOP,SAASS,QAAQC","file":"string-line-iterator.test.js","sourcesContent":["/*\n *\tCreated by Trevor Sears <trevorsears.main@gmail.com>.\n *\t8:19 PM -- July 21st, 2019.\n *\tWebsite: iter-over\n */\n\nimport { StringLineIterator } from \"../string-line-iterator\";\n\n/**\n *\n *\n * @author Trevor Sears <trevorsears.main@gmail.com>\n * @version v0.1.0\n * @since v0.1.0\n */\n\nlet iterator: StringLineIterator;\n\ndescribe(\"Single-line input.\", () => {\n\t\n\tlet content: string = \"Hello there!\";\n\n\tbeforeEach(() => {\n\t\t\n\t\titerator = new StringLineIterator(content);\n\t\t\n\t});\n\t\n\ttest(\"Expect single returned value.\", () => {\n\t\t\n\t\tlet returnedValues: number = 0;\n\t\t\n\t\titerator.forEachRemaining(() => returnedValues++);\n\t\t\n\t\texpect(returnedValues).toBe(1);\n\t\t\n\t});\n\t\n\ttest(\"Expect correct string to be received.\", () => {\n\t\t\n\t\texpect(iterator.next()).toBe(content);\n\t\t\n\t});\n\t\n\ttest(\"Expect forced calls to #next to return undefined.\", () => {\n\t\t\n\t\titerator.next();\n\t\t\n\t\texpect(iterator.next()).toBeUndefined();\n\t\t\n\t});\n\n});\n\ndescribe(\"Multi-line input.\", () => {\n\t\n\tlet content: string = `This is\nmy multiline\nstring content`;\n\t\n\tbeforeEach(() => {\n\t\t\n\t\titerator = new StringLineIterator(content);\n\t\t\n\t});\n\t\n\ttest(\"Expect set-number of returned values.\", () => {\n\t\t\n\t\tlet returnedValues: number = 0;\n\t\t\n\t\titerator.forEachRemaining(() => returnedValues++);\n\t\t\n\t\texpect(returnedValues).toBe(3);\n\t\t\n\t});\n\t\n\ttest(\"Expect correct string to be received.\", () => {\n\t\t\n\t\tlet result: string[] = [];\n\t\t\n\t\titerator.forEachRemaining((value: string) => result.push(value));\n\t\t\n\t\texpect(result.join(\"\\n\")).toBe(content);\n\t\t\n\t});\n\t\n\ttest(\"Expect forced calls to #next to return undefined.\", () => {\n\t\t\n\t\titerator.next();\n\t\titerator.next();\n\t\titerator.next();\n\t\t\n\t\texpect(iterator.next()).toBeUndefined();\n\t\t\n\t});\n\t\n});"]}