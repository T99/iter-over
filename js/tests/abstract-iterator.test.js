"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const abstract_iterator_1=require("../abstract-iterator");let iterator;describe("Iterating 0 through 9.",()=>{beforeEach(()=>{iterator=new class extends abstract_iterator_1.AbstractIterator{constructor(){super(...arguments),this.currentVal=0}hasNext(){return this.currentVal<=9}next(){return this.currentVal++}}}),test("Number values are correct.",()=>{expect(iterator.next()).toBe(0),expect(iterator.next()).toBe(1),expect(iterator.next()).toBe(2),expect(iterator.next()).toBe(3),expect(iterator.next()).toBe(4),expect(iterator.next()).toBe(5),expect(iterator.next()).toBe(6),expect(iterator.next()).toBe(7),expect(iterator.next()).toBe(8),expect(iterator.next()).toBe(9)}),test("#forEachRemaining",()=>{let t=0;iterator.forEachRemaining(e=>t+=e),expect(t).toBe(45)}),test("#remove",()=>{expect(()=>iterator.remove()).toThrow(Error)}),test("#reset",()=>{expect(()=>iterator.reset()).toThrow(Error)}),test("#[Symbol.iterator]",()=>{expect(iterator[Symbol.iterator]).toBeDefined()}),test("#hasNext is false after iteration.",()=>{let t;do{t=iterator.next()}while(9!==t);expect(iterator.hasNext()).toBeFalsy()})}),describe("Iterating A through Z.",()=>{beforeEach(()=>{iterator=new class extends abstract_iterator_1.AbstractIterator{constructor(){super(...arguments),this.ascii=65}hasNext(){return this.ascii<=90}next(){return String.fromCharCode(this.ascii++)}}}),test("Character values are correct.",()=>{for(let t of["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"])expect(iterator.hasNext()).toBeTruthy(),expect(iterator.next()).toBe(t)}),test("#forEachRemaining",()=>{let t="";iterator.forEachRemaining(e=>t+=e),expect(t).toBe("ABCDEFGHIJKLMNOPQRSTUVWXYZ")}),test("#remove",()=>{expect(()=>iterator.remove()).toThrow(Error)}),test("#reset",()=>{expect(()=>iterator.reset()).toThrow(Error)}),test("#[Symbol.iterator]",()=>{expect(iterator[Symbol.iterator]).toBeDefined()}),test("#hasNext is false after iteration.",()=>{let t;do{t=iterator.next()}while("Z"!==t);expect(iterator.hasNext()).toBeFalsy()})});
//# sourceMappingURL=abstract-iterator.test.js.map
