{"version":3,"sources":["ts/tests/abstract-iterator.test.ts"],"names":["abstract_iterator_1","require","iterator","describe","beforeEach","AbstractIterator","[object Object]","this","currentVal","test","expect","next","toBe","sum","forEachRemaining","value","remove","toThrow","Error","reset","Symbol","toBeDefined","hasNext","toBeFalsy","ascii","String","fromCharCode","char","toBeTruthy","concat"],"mappings":"oEAMA,MAAAA,oBAAAC,QAAA,wBAEA,IAAIC,SAEJC,SAAS,yBAA0B,KAElCC,WAAW,KAEVF,SAAW,IAAI,cAAcF,oBAAAK,iBAAdC,kCAENC,KAAAC,WAAqB,EAEtBF,UAEN,OAAQC,KAAKC,YAAc,EAIrBF,OAEN,OAAOC,KAAKC,iBAQfC,KAAK,6BAA8B,KAElCC,OAAOR,SAASS,QAAQC,KAAK,GAC7BF,OAAOR,SAASS,QAAQC,KAAK,GAC7BF,OAAOR,SAASS,QAAQC,KAAK,GAC7BF,OAAOR,SAASS,QAAQC,KAAK,GAC7BF,OAAOR,SAASS,QAAQC,KAAK,GAC7BF,OAAOR,SAASS,QAAQC,KAAK,GAC7BF,OAAOR,SAASS,QAAQC,KAAK,GAC7BF,OAAOR,SAASS,QAAQC,KAAK,GAC7BF,OAAOR,SAASS,QAAQC,KAAK,GAC7BF,OAAOR,SAASS,QAAQC,KAAK,KAI9BH,KAAK,oBAAqB,KAEzB,IAAII,EAAc,EAElBX,SAASY,iBAAkBC,GAAkBF,GAAOE,GAEpDL,OAAOG,GAAKD,KAAK,MAIlBH,KAAK,UAAW,KAEfC,OAAO,IAAMR,SAASc,UAAUC,QAAQC,SAIzCT,KAAK,SAAU,KAEdC,OAAO,IAAMR,SAASiB,SAASF,QAAQC,SAIxCT,KAAK,qBAAsB,KAE1BC,OAAOR,SAASkB,OAAOlB,WAAWmB,gBAInCZ,KAAK,qCAAsC,KAE1C,IAAIM,EAEJ,GAECA,EAAQb,SAASS,aAEC,IAAVI,GAETL,OAAOR,SAASoB,WAAWC,gBAM7BpB,SAAS,yBAA0B,KAElCC,WAAW,KAEVF,SAAW,IAAI,cAAcF,oBAAAK,iBAAdC,kCAENC,KAAAiB,MAAgB,GAEjBlB,UAEN,OAAQC,KAAKiB,OAAS,GAIhBlB,OAEN,OAAOmB,OAAOC,aAAanB,KAAKiB,aAQnCf,KAAK,gCAAiC,KAErC,IAAK,IAAIkB,IAAQ,CAChB,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC5D,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAG5DjB,OAAOR,SAASoB,WAAWM,aAC3BlB,OAAOR,SAASS,QAAQC,KAAKe,KAM/BlB,KAAK,oBAAqB,KAEzB,IAAIoB,EAAiB,GAErB3B,SAASY,iBAAkBa,GAAiBE,GAAUF,GAEtDjB,OAAOmB,GAAQjB,KAAK,gCAIrBH,KAAK,UAAW,KAEfC,OAAO,IAAMR,SAASc,UAAUC,QAAQC,SAIzCT,KAAK,SAAU,KAEdC,OAAO,IAAMR,SAASiB,SAASF,QAAQC,SAIxCT,KAAK,qBAAsB,KAE1BC,OAAOR,SAASkB,OAAOlB,WAAWmB,gBAInCZ,KAAK,qCAAsC,KAE1C,IAAIM,EAEJ,GAECA,EAAQb,SAASS,aAEC,MAAVI,GAETL,OAAOR,SAASoB,WAAWC","file":"abstract-iterator.test.js","sourcesContent":["/*\n *\tCreated by Trevor Sears <trevorsears.main@gmail.com>.\n *\t11:05 PM -- June 07th, 2019.\n *\tProject: iter-over\n */\n\nimport { AbstractIterator } from \"../abstract-iterator\";\n\nlet iterator: AbstractIterator<any>;\n\ndescribe(\"Iterating 0 through 9.\", () => {\n\t\n\tbeforeEach(() => {\n\t\t\n\t\titerator = new class extends AbstractIterator<number> {\n\t\t\t\n\t\t\tprivate currentVal: number = 0;\n\t\t\t\n\t\t\tpublic hasNext(): boolean {\n\t\t\t\t\n\t\t\t\treturn (this.currentVal <= 9);\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tpublic next(): any | undefined {\n\t\t\t\t\n\t\t\t\treturn this.currentVal++;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t};\n\t\t\n\t});\n\t\n\ttest(\"Number values are correct.\", () => {\n\t\t\n\t\texpect(iterator.next()).toBe(0);\n\t\texpect(iterator.next()).toBe(1);\n\t\texpect(iterator.next()).toBe(2);\n\t\texpect(iterator.next()).toBe(3);\n\t\texpect(iterator.next()).toBe(4);\n\t\texpect(iterator.next()).toBe(5);\n\t\texpect(iterator.next()).toBe(6);\n\t\texpect(iterator.next()).toBe(7);\n\t\texpect(iterator.next()).toBe(8);\n\t\texpect(iterator.next()).toBe(9);\n\t\t\n\t});\n\t\n\ttest(\"#forEachRemaining\", () => {\n\t\n\t\tlet sum: number = 0;\n\t\t\n\t\titerator.forEachRemaining((value: number) => sum += value);\n\t\t\n\t\texpect(sum).toBe(45);\n\t\t\n\t});\n\t\n\ttest(\"#remove\", () => {\n\t\t\n\t\texpect(() => iterator.remove()).toThrow(Error);\n\t\t\n\t});\n\t\n\ttest(\"#reset\", () => {\n\t\t\n\t\texpect(() => iterator.reset()).toThrow(Error);\n\t\t\n\t});\n\t\n\ttest(\"#[Symbol.iterator]\", () => {\n\t\t\n\t\texpect(iterator[Symbol.iterator]).toBeDefined();\n\t\t\n\t});\n\t\n\ttest(\"#hasNext is false after iteration.\", () => {\n\t\t\n\t\tlet value: any;\n\t\t\n\t\tdo {\n\t\t\t\n\t\t\tvalue = iterator.next();\n\t\t\t\n\t\t} while (value !== 9);\n\t\t\n\t\texpect(iterator.hasNext()).toBeFalsy();\n\t\t\n\t});\n\t\n});\n\ndescribe(\"Iterating A through Z.\", () => {\n\t\n\tbeforeEach(() => {\n\t\t\n\t\titerator = new class extends AbstractIterator<string> {\n\t\t\t\n\t\t\tprivate ascii: number = 65;\n\t\t\t\n\t\t\tpublic hasNext(): boolean {\n\t\t\t\t\n\t\t\t\treturn (this.ascii <= 90);\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tpublic next(): string {\n\t\t\t\t\n\t\t\t\treturn String.fromCharCode(this.ascii++);\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t};\n\t\t\n\t});\n\t\n\ttest(\"Character values are correct.\", () => {\n\t\t\n\t\tfor (let char of [\n\t\t\t\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\",\n\t\t\t\"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"\n\t\t]) {\n\t\t\t\n\t\t\texpect(iterator.hasNext()).toBeTruthy();\n\t\t\texpect(iterator.next()).toBe(char);\n\t\t\t\n\t\t}\n\t\t\n\t});\n\t\n\ttest(\"#forEachRemaining\", () => {\n\t\t\n\t\tlet concat: string = \"\";\n\t\t\n\t\titerator.forEachRemaining((char: string) => concat += char);\n\t\t\n\t\texpect(concat).toBe(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\");\n\t\t\n\t});\n\t\n\ttest(\"#remove\", () => {\n\t\t\n\t\texpect(() => iterator.remove()).toThrow(Error);\n\t\t\n\t});\n\t\n\ttest(\"#reset\", () => {\n\t\t\n\t\texpect(() => iterator.reset()).toThrow(Error);\n\t\t\n\t});\n\t\n\ttest(\"#[Symbol.iterator]\", () => {\n\t\t\n\t\texpect(iterator[Symbol.iterator]).toBeDefined();\n\t\t\n\t});\n\t\n\ttest(\"#hasNext is false after iteration.\", () => {\n\t\t\n\t\tlet value: any;\n\t\t\n\t\tdo {\n\t\t\t\n\t\t\tvalue = iterator.next();\n\t\t\t\n\t\t} while (value !== \"Z\");\n\t\t\n\t\texpect(iterator.hasNext()).toBeFalsy();\n\t\t\n\t});\n\t\n});"]}