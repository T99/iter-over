{"version":3,"sources":["../ts/object-iterator.ts"],"names":[],"mappings":";;AAMA,2DAAuD;AAUvD,MAAa,cAAwB,SAAQ,oCAAyC;IAMrF,YAAmB,OAAY;QAE9B,KAAK,EAAE,CAAC;QAJD,UAAK,GAAW,CAAC,CAAC;QAMzB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QAEvB,IAAI,CAAC,IAAI,CAAC,OAAO,KAAK,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,KAAK,SAAS,CAAC,EAAE;YAE5D,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SAEtC;;YAAM,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;IAEvB,CAAC;IAEM,OAAO;QAEb,OAAO,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAExC,CAAC;IAEM,IAAI;QAEV,IAAI,GAAG,GAAW,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;QAC1C,IAAI,KAAK,GAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAEjC,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC;IAEvB,CAAC;IAEM,MAAM;QAEZ,IAAI,IAAI,CAAC,KAAK,GAAG,CAAC,EAAE;YAEnB,IAAI,GAAG,GAAW,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;YAC1C,IAAI,KAAK,GAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YACjC,IAAI,MAAM,GAA4B,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC;YAErD,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YAEzB,OAAO,MAAM,CAAC;SAEd;aAAM;YAEN,OAAO,SAAS,CAAC;SAEjB;IAEF,CAAC;IAEM,KAAK;QAEX,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;IAEhB,CAAC;CAED;AA7DD,wCA6DC","file":"object-iterator.js","sourcesContent":["/*\n *\tCreated by Trevor Sears <trevorsears.main@gmail.com>.\n *\t11:45 PM -- December 16th, 2018.\n *\tProject: iter-over\n */\n\nimport { AbstractIterator } from \"./abstract-iterator\";\nimport { KeyValuePair } from \"./key-value-pair\";\n\n/**\n * A AbstractIterator that iterates over the keys of an object.\n *\n * @author Trevor Sears <trevorsears.main@gmail.com>\n * @version v1.0.0\n * @since v0.1.0\n */\nexport class ObjectIterator<E = any> extends AbstractIterator<KeyValuePair<string, E>> {\n\t\n\tprivate content: any;\n\tprivate keys: string[];\n\tprivate index: number = 0;\n\t\n\tpublic constructor(content: any) {\n\t\t\n\t\tsuper();\n\t\t\n\t\tthis.content = content;\n\t\t\n\t\tif ((this.content !== null) && (this.content !== undefined)) {\n\t\t\t\n\t\t\tthis.keys = Object.keys(this.content);\n\t\t\t\n\t\t} else this.keys = [];\n\t\t\n\t}\n\t\n\tpublic hasNext(): boolean {\n\t\t\n\t\treturn (this.index < this.keys.length);\n\t\t\n\t}\n\t\n\tpublic next(): KeyValuePair<string, E> {\n\t\t\n\t\tlet key: string = this.keys[this.index++];\n\t\tlet value: E = this.content[key];\n\t\t\n\t\treturn { key, value };\n\t\t\n\t}\n\t\n\tpublic remove(): KeyValuePair<string, E> | undefined {\n\t\t\n\t\tif (this.index > 0) {\n\t\t\t\n\t\t\tlet key: string = this.keys[--this.index];\n\t\t\tlet value: E = this.content[key];\n\t\t\tlet result: KeyValuePair<string, E> = { key, value };\n\t\t\t\n\t\t\tdelete this.content[key];\n\t\t\t\n\t\t\treturn result;\n\t\t\t\n\t\t} else {\n\t\t\t\n\t\t\treturn undefined;\n\t\t\t\n\t\t}\n\t\t\n\t}\n\t\n\tpublic reset(): void {\n\t\t\n\t\tthis.index = 0;\n\t\t\n\t}\n\t\n}"]}