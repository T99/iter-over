{"version":3,"sources":["../ts/abstract-iterator.ts"],"names":["AbstractIterator","[object Object]","callback","this","hasNext","next","Error","Symbol","iterator","done","value","exports"],"mappings":"oEAeA,MAAsBA,iBAqBdC,iBAAiBC,GAEvB,KAAOC,KAAKC,WAAWF,EAASC,KAAKE,QAS/BJ,SAEN,MAAM,IAAIK,MAAM,2FAQVL,QAEN,MAAM,IAAIK,MAAM,0FAIVL,CAACM,OAAOC,YAEd,OAAO,IAAI,MAIVP,YAAmBO,GAElBL,KAAKK,SAAWA,EAIVP,CAACM,OAAOC,YAEd,OAAOL,KAIDF,OAEN,MAAO,CAENQ,MAAON,KAAKK,SAASJ,UACrBM,MAAOP,KAAKK,SAASH,UAMtBF,OA7EJQ,QAAAX,iBAAAA","file":"abstract-iterator.js","sourcesContent":["/*\n *\tCreated by Trevor Sears <trevorsears.main@gmail.com>.\n *\t11:21 AM -- December 07th, 2018.\n *\tProject: iter-over\n */\n\nimport { IIterator } from \"./i-iterator\";\n\n/**\n * A generic iterator very similar to the pattern used in Java.\n *\n * @author Trevor Sears <trevorsears.main@gmail.com>\n * @version v1.0.0\n * @since v0.1.0\n */\nexport abstract class AbstractIterator<T> implements IIterator<T> {\n\t\n\t/**\n\t * Returns true if a call to #next() would return a meaningful result after calling this method.\n\t *\n\t * @returns {boolean} true if a call to #next() would return a meaningful result.\n\t */\n\tpublic abstract hasNext(): boolean;\n\t\n\t/**\n\t * Returns the next element this AbstractIterator has to iterate over.\n\t *\n\t * @returns {T} The next element this AbstractIterator has.\n\t */\n\tpublic abstract next(): T;\n\t\n\t/**\n\t * Performs the specified action for all of the remaining elements in this AbstractIterator.\n\t *\n\t * @param {(element: T) => void} callback The action to perform on the remaining elements of this AbstractIterator.\n\t */\n\tpublic forEachRemaining(callback: (element: T) => void): void {\n\t\t\n\t\twhile (this.hasNext()) callback(this.next());\n\t\t\n\t}\n\t\n\t/**\n\t * Removes and returns the last element returned by the #next() method from the underlying data structure.\n\t *\n\t * @returns {T} The last element returned by the #next() method.\n\t */\n\tpublic remove(): T | undefined {\n\t\t\n\t\tthrow new Error(\"ERR | #remove() operation is not supported for this implementation of AbstractIterator.\");\n\t\t\n\t}\n\t\n\t/**\n\t * Resets this AbstractIterator back to it's initial position, readying it to iterate over the underlying collection from\n\t * the 'beginning' again.\n\t */\n\tpublic reset(): void {\n\t\t\n\t\tthrow new Error(\"ERR | #reset() operation is not supported for this implementation of AbstractIterator.\");\n\t\t\n\t}\n\t\n\tpublic [Symbol.iterator](): IterableIterator<T> {\n\t\t\n\t\treturn new class implements IterableIterator<T> {\n\t\t\t\n\t\t\tprivate iterator: AbstractIterator<T>;\n\t\t\t\n\t\t\tpublic constructor(iterator: AbstractIterator<T>) {\n\t\t\t\t\n\t\t\t\tthis.iterator = iterator;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tpublic [Symbol.iterator](): IterableIterator<T> {\n\t\t\t\t\n\t\t\t\treturn this;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tpublic next(): IteratorResult<T> {\n\t\t\t\t\n\t\t\t\treturn {\n\t\t\t\t\t\n\t\t\t\t\tdone: !this.iterator.hasNext(),\n\t\t\t\t\tvalue: this.iterator.next()\n\t\t\t\t\t\n\t\t\t\t};\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}(this);\n\t\t\n\t}\n\t\n}"]}