{"version":3,"sources":["../ts/i-iterator.ts"],"names":[],"mappings":"","file":"i-iterator.js","sourcesContent":["/*\n *\tCreated by Trevor Sears <trevorsears.main@gmail.com>.\n *\t11:21 AM -- December 07th, 2018.\n *\tProject: iter-over\n */\n\n/**\n * A generic iterator very similar to the pattern used in Java.\n *\n * @author Trevor Sears <trevorsears.main@gmail.com>\n * @version v1.0.0\n * @since v0.1.0\n */\nexport interface IIterator<T> {\n\t\n\t/**\n\t * Returns true if a call to #next() would return a meaningful result after calling this method.\n\t *\n\t * @returns {boolean} true if a call to #next() would return a meaningful result.\n\t */\n\thasNext(): boolean;\n\t\n\t/**\n\t * Returns the next element this IIterator has to iterate over.\n\t *\n\t * @returns {T} The next element this IIterator has.\n\t */\n\tnext(): T | undefined;\n\t\n\t/**\n\t * Performs the specified action for all of the remaining elements in this IIterator.\n\t *\n\t * @param {(element: T) => void} callback The action to perform on the remaining elements of this IIterator.\n\t */\n\tforEachRemaining(callback: (element: T) => void): void;\n\t\n\t/**\n\t * Removes and returns the last element returned by the #next() method from the underlying data structure.\n\t *\n\t * @returns {T} The last element returned by the #next() method.\n\t */\n\tremove?(): T | undefined;\n\t\n\t/**\n\t * Resets this IIterator back to it's initial position, readying it to iterate over the underlying collection from\n\t * the 'beginning' again.\n\t */\n\treset?(): void;\n\t\n\t[Symbol.iterator](): IterableIterator<T | undefined>;\n\t\n}"]}