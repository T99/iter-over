{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"iter-over \u00b6 Welcome to the iter-over documentation. Getting Started \u00b6 Just looking to get started with iter-over and want a step-by-step walkthrough? Check out the various available tutorials located under The Basics , including: Creating a Color Iterator Iterating Over Promises Advanced Iterator Capabilities Reference Material \u00b6 Already know your way around the library and looking for more specific documentation? Check out the reference material located under the Reference tab.","title":"Overview"},{"location":"#iter-over","text":"Welcome to the iter-over documentation.","title":"iter-over"},{"location":"#getting-started","text":"Just looking to get started with iter-over and want a step-by-step walkthrough? Check out the various available tutorials located under The Basics , including: Creating a Color Iterator Iterating Over Promises Advanced Iterator Capabilities","title":"Getting Started"},{"location":"#reference-material","text":"Already know your way around the library and looking for more specific documentation? Check out the reference material located under the Reference tab.","title":"Reference Material"},{"location":"basics/","text":"The Basics \u00b6 This is the beginner documentation.","title":"Overview"},{"location":"basics/#the-basics","text":"This is the beginner documentation.","title":"The Basics"},{"location":"basics/guides/advanced-iterator-capabilities/","text":"Advanced Iterator Capabilities \u00b6","title":"Advanced Iterator Capabilities"},{"location":"basics/guides/advanced-iterator-capabilities/#advanced-iterator-capabilities","text":"","title":"Advanced Iterator Capabilities"},{"location":"basics/guides/creating-a-color-iterator/","text":"Creating a Color Iterator \u00b6","title":"Creating a Color Iterator"},{"location":"basics/guides/creating-a-color-iterator/#creating-a-color-iterator","text":"","title":"Creating a Color Iterator"},{"location":"basics/guides/iterating-over-promises/","text":"Iterating Over Promises \u00b6","title":"Iterating Over Promises"},{"location":"basics/guides/iterating-over-promises/#iterating-over-promises","text":"","title":"Iterating Over Promises"},{"location":"basics/utility-classes/","text":"The Basics/Utility Classes \u00b6 There are a handful of utility classes provided with iter-over that come ready-to-use. EmptyIterator \u00b6 Want an empty iterator that doesn't return any content? This is the iterator for you! 1 2 3 4 let empty : EmptyIterator = new EmptyIterator (); empty . hasNext () // 'false' empty . next () // 'undefined' Seems useless, but in a way, that's kind of the point. Rarely, it happens to be semantically useful to have an iterator that does nothing. ObjectIterator \u00b6 How many times have you typed out the classic for (let prop of Object.keys(myObj)) ... mantra? More than three times? Yeah, me too. Here's an easy way to loop over the key-value pairs present in an object: 1 2 3 4 5 6 7 let props : ObjectIterator < Person > = new ObjectIterator ( jasonBourne ); for ( let kvPair of props ) console . log ( ` ${ kvPair . key } : ${ kvPair . value } ` ); // 'firstName: Jason' // 'lastName: Bourne' // 'middleInitial: F'","title":"Overview"},{"location":"basics/utility-classes/#the-basicsutility-classes","text":"There are a handful of utility classes provided with iter-over that come ready-to-use.","title":"The Basics/Utility Classes"},{"location":"basics/utility-classes/#emptyiterator","text":"Want an empty iterator that doesn't return any content? This is the iterator for you! 1 2 3 4 let empty : EmptyIterator = new EmptyIterator (); empty . hasNext () // 'false' empty . next () // 'undefined' Seems useless, but in a way, that's kind of the point. Rarely, it happens to be semantically useful to have an iterator that does nothing.","title":"EmptyIterator"},{"location":"basics/utility-classes/#objectiterator","text":"How many times have you typed out the classic for (let prop of Object.keys(myObj)) ... mantra? More than three times? Yeah, me too. Here's an easy way to loop over the key-value pairs present in an object: 1 2 3 4 5 6 7 let props : ObjectIterator < Person > = new ObjectIterator ( jasonBourne ); for ( let kvPair of props ) console . log ( ` ${ kvPair . key } : ${ kvPair . value } ` ); // 'firstName: Jason' // 'lastName: Bourne' // 'middleInitial: F'","title":"ObjectIterator"},{"location":"basics/utility-classes/array-iterator/","text":"The Basics/Utility Classes/ ArrayIterator \u00b6 Reference Documentation Find reference documentation for ArrayIterator here , or navigate to it via the 'Reference' tab.","title":"ArrayIterator"},{"location":"basics/utility-classes/array-iterator/#the-basicsutility-classesarrayiterator","text":"Reference Documentation Find reference documentation for ArrayIterator here , or navigate to it via the 'Reference' tab.","title":"The Basics/Utility Classes/ArrayIterator"},{"location":"basics/utility-classes/async-iterator/","text":"The Basics/Utility Classes/ AsyncIterator \u00b6 Reference Documentation Find reference documentation for AsyncIterator here , or navigate to it via the 'Reference' tab.","title":"AsyncIterator"},{"location":"basics/utility-classes/async-iterator/#the-basicsutility-classesasynciterator","text":"Reference Documentation Find reference documentation for AsyncIterator here , or navigate to it via the 'Reference' tab.","title":"The Basics/Utility Classes/AsyncIterator"},{"location":"basics/utility-classes/empty-iterator/","text":"The Basics/Utility Classes/ EmptyIterator \u00b6 Reference Documentation Find reference documentation for EmptyIterator here , or navigate to it via the 'Reference' tab. Rarely, it is semantically useful to have an empty iterator that follows the iterator pattern but will never have content. 1 2 3 4 5 let iter : EmptyIterator = new EmptyIterator (); console . log ( iter . hasNext ()); // Prints 'false'.","title":"EmptyIterator"},{"location":"basics/utility-classes/empty-iterator/#the-basicsutility-classesemptyiterator","text":"Reference Documentation Find reference documentation for EmptyIterator here , or navigate to it via the 'Reference' tab. Rarely, it is semantically useful to have an empty iterator that follows the iterator pattern but will never have content. 1 2 3 4 5 let iter : EmptyIterator = new EmptyIterator (); console . log ( iter . hasNext ()); // Prints 'false'.","title":"The Basics/Utility Classes/EmptyIterator"},{"location":"basics/utility-classes/object-iterator/","text":"The Basics/Utility Classes/ ObjectIterator \u00b6 Reference Documentation Find reference documentation for ObjectIterator here , or navigate to it via the 'Reference' tab. How many times have you typed out the classic for (let prop of Object.keys(myObj)) ... mantra? More than three times? Yeah, me too. Here's an easy way to loop over the key-value pairs present in an object: 1 2 3 4 5 6 7 let props : ObjectIterator < Person > = new ObjectIterator ( jasonBourne ); for ( let kvPair of props ) console . log ( ` ${ kvPair . key } : ${ kvPair . value } ` ); // 'firstName: Jason' // 'lastName: Bourne' // 'middleInitial: F' The Simple Stuff \u00b6 If you hadn't figured it out from that example, ObjectIterator instances provide the ability to iterate over the key-value pairs of a provided input object, returning KeyValuePair s . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 let iter : ObjectIterator = new ObjectIterator ({ key1 : \"value 1\" , key2 : 2 , key3 : false , key4 : { innerKey : \"innerVal\" } }); for ( let kvPair of iter ) console . log ( kvPair ); // '{ key: \"key1\", value: \"value 1\" }' // '{ key: \"key2\", value: 2 }' // '{ key: \"key3\", value: false }' // '{ key: \"key4\", value: { innerKey: \"innerVal\" } }' Type Support \u00b6 As we alluded to in the first example on this page, if you have more strictly-typed objects you can also pass a type to ObjectIterator. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 type Car = { name : string , price : number , horn : string } let iter : ObjectIterator < Car > = new ObjectIterator ({ name : \"Persephone\" , price : 82000 , horn : \"La Cucaracha\" }); for ( let kvPair of iter ) console . log ( kvPair ); // Prints... // '{ key: \"name\", value: \"Persephone\" }', // '{ key: \"price\", value: 82000 }', // '{ key: \"horn\", value: \"La Cucaracha\" }' A Word of Warning \u00b6 One small hiccup - in JavaScript, every object ( every object) stores its keys as strings. This means that, when attempting to use an object that has (read: appears to have) numeric keys, the keys will be 'coerced' into strings. I put air quotes around 'coerced' because there isn't actually any type coercion occurring - the keys were always strings. The only time actual number-to-string coercion occurs is when an array is passed to the ObjectIterator constructor. In this situation, the indices of the elements of the provided array will be returned as strings: 1 2 3 4 5 6 7 8 9 10 11 let iter : ObjectIterator = new ObjectIterator ([ \"Oh\" , \"jeez\" , \"Scoob\" ]); for ( let kvPair of iter ) console . log ( kvPair ); // '{ key: \"0\", value: \"Oh\" }', // '{ key: \"1\", value: \"jeez\" }', // '{ key: \"2\", value: \"Scoob\" }'","title":"ObjectIterator"},{"location":"basics/utility-classes/object-iterator/#the-basicsutility-classesobjectiterator","text":"Reference Documentation Find reference documentation for ObjectIterator here , or navigate to it via the 'Reference' tab. How many times have you typed out the classic for (let prop of Object.keys(myObj)) ... mantra? More than three times? Yeah, me too. Here's an easy way to loop over the key-value pairs present in an object: 1 2 3 4 5 6 7 let props : ObjectIterator < Person > = new ObjectIterator ( jasonBourne ); for ( let kvPair of props ) console . log ( ` ${ kvPair . key } : ${ kvPair . value } ` ); // 'firstName: Jason' // 'lastName: Bourne' // 'middleInitial: F'","title":"The Basics/Utility Classes/ObjectIterator"},{"location":"basics/utility-classes/object-iterator/#the-simple-stuff","text":"If you hadn't figured it out from that example, ObjectIterator instances provide the ability to iterate over the key-value pairs of a provided input object, returning KeyValuePair s . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 let iter : ObjectIterator = new ObjectIterator ({ key1 : \"value 1\" , key2 : 2 , key3 : false , key4 : { innerKey : \"innerVal\" } }); for ( let kvPair of iter ) console . log ( kvPair ); // '{ key: \"key1\", value: \"value 1\" }' // '{ key: \"key2\", value: 2 }' // '{ key: \"key3\", value: false }' // '{ key: \"key4\", value: { innerKey: \"innerVal\" } }'","title":"The Simple Stuff"},{"location":"basics/utility-classes/object-iterator/#type-support","text":"As we alluded to in the first example on this page, if you have more strictly-typed objects you can also pass a type to ObjectIterator. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 type Car = { name : string , price : number , horn : string } let iter : ObjectIterator < Car > = new ObjectIterator ({ name : \"Persephone\" , price : 82000 , horn : \"La Cucaracha\" }); for ( let kvPair of iter ) console . log ( kvPair ); // Prints... // '{ key: \"name\", value: \"Persephone\" }', // '{ key: \"price\", value: 82000 }', // '{ key: \"horn\", value: \"La Cucaracha\" }'","title":"Type Support"},{"location":"basics/utility-classes/object-iterator/#a-word-of-warning","text":"One small hiccup - in JavaScript, every object ( every object) stores its keys as strings. This means that, when attempting to use an object that has (read: appears to have) numeric keys, the keys will be 'coerced' into strings. I put air quotes around 'coerced' because there isn't actually any type coercion occurring - the keys were always strings. The only time actual number-to-string coercion occurs is when an array is passed to the ObjectIterator constructor. In this situation, the indices of the elements of the provided array will be returned as strings: 1 2 3 4 5 6 7 8 9 10 11 let iter : ObjectIterator = new ObjectIterator ([ \"Oh\" , \"jeez\" , \"Scoob\" ]); for ( let kvPair of iter ) console . log ( kvPair ); // '{ key: \"0\", value: \"Oh\" }', // '{ key: \"1\", value: \"jeez\" }', // '{ key: \"2\", value: \"Scoob\" }'","title":"A Word of Warning"},{"location":"basics/utility-classes/string-character-iterator/","text":"The Basics/Utility Classes/ StringCharacterIterator \u00b6 Reference Documentation Find reference documentation for StringCharacterIterator here , or navigate to it via the 'Reference' tab. StringCharacterIterator iterates over the characters of a provided input string. 1 2 3 4 5 let iter : StringCharacterIterator = new StringCharacterIterator ( \"Hello!\" ); for ( let character of iter ) console . log ( character ); // Prints 'H', 'e', 'l', 'l', 'o', '!'.","title":"StringCharacterIterator"},{"location":"basics/utility-classes/string-character-iterator/#the-basicsutility-classesstringcharacteriterator","text":"Reference Documentation Find reference documentation for StringCharacterIterator here , or navigate to it via the 'Reference' tab. StringCharacterIterator iterates over the characters of a provided input string. 1 2 3 4 5 let iter : StringCharacterIterator = new StringCharacterIterator ( \"Hello!\" ); for ( let character of iter ) console . log ( character ); // Prints 'H', 'e', 'l', 'l', 'o', '!'.","title":"The Basics/Utility Classes/StringCharacterIterator"},{"location":"basics/utility-classes/string-line-iterator/","text":"The Basics/Utility Classes/ StringLineIterator \u00b6 Reference Documentation Find reference documentation for StringLineIterator here , or navigate to it via the 'Reference' tab. StringLineIterator iterates over the lines of a provided input string. 1 2 3 4 5 6 7 let iter : StringLineIterator = new StringLineIterator ( `Hello there, world!` ); for ( let line of iter ) console . log ( line ); // Prints 'Hello', 'there,', 'world!'.","title":"StringLineIterator"},{"location":"basics/utility-classes/string-line-iterator/#the-basicsutility-classesstringlineiterator","text":"Reference Documentation Find reference documentation for StringLineIterator here , or navigate to it via the 'Reference' tab. StringLineIterator iterates over the lines of a provided input string. 1 2 3 4 5 6 7 let iter : StringLineIterator = new StringLineIterator ( `Hello there, world!` ); for ( let line of iter ) console . log ( line ); // Prints 'Hello', 'there,', 'world!'.","title":"The Basics/Utility Classes/StringLineIterator"},{"location":"reference/","text":"Reference \u00b6 This is the reference documentation.","title":"Overview"},{"location":"reference/#reference","text":"This is the reference documentation.","title":"Reference"},{"location":"reference/core/abstract-iterator/","text":"Reference/Utility Classes/ AbstractIterator \u00b6 A generic iterator very similar to the pattern used in Java. Class Signature \u00b6 Description A generic iterator very similar to the pattern used in Java. Generic Arguments - E [ any ] The type of element which will be returned during iteration over this object. Initial Version v0.1.0 Latest Version v1.5.0 1 abstract class AbstractIterator < E > implements IIterator < E > Inheritance \u00b6 Extends Direct: none Indirect: none Implements Direct: IIterator : An interface representing the general form of an iterable class. Indirect: none Subclasses Direct: ArrayIterator : Add tagline. AsyncIterator : Add tagline. EmptyIterator : Add tagline. ObjectIterator : Add tagline. StringCharacterIterator : Add tagline. StringLineIterator : Add tagline. Indirect: none Abstract Instance Method Signatures \u00b6 #hasNext \u00b6 Description Returns true if this iterator has at least one more element that can be returned from next() . Returns [ boolean ] true if this iterator has at least one more element that can be returned from next() . Implements IIterator#hasNext 1 public abstract hasNext () : boolean #next \u00b6 Description Returns the next element this AbstractIterator has to iterate over. Returns [ E ] The next element this AbstractIterator has. Implements IIterator#next 1 public abstract next () : E Concrete Instance Method Signatures \u00b6 #forEachRemaining \u00b6 Description Performs the specified action for all of the remaining elements in this AbstractIterator . Parameters - callback [ ( element : E ) => void ] The action to perform on the remaining elements of this AbstractIterator . Implements IIterator#forEachRemaining 1 public forEachRemaining ( callback : ( element : E ) => void ) : void #remove \u00b6 Description Removes and returns the last element returned by the next() method from the underlying data structure. Returns [ E | undefined ] The last element returned by the next() method. Implements IIterator#remove 1 public remove () : E | undefined #reset \u00b6 Description Resets this AbstractIterator back to it's initial position, readying it to iterate over the underlying collection from the 'beginning' again. Implements IIterator#reset 1 public reset () : void #[Symbol.iterator] \u00b6 Implements IIterator#[Symbol.iterator] 1 public [ Symbol . iterator ]() : IterableIterator < E > #getIterableIterator \u00b6 Implements IIterator#getIterableIterator 1 public getIterableIterator () : IterableIterator < E >","title":"AbstractIterator"},{"location":"reference/core/abstract-iterator/#referenceutility-classesabstractiterator","text":"A generic iterator very similar to the pattern used in Java.","title":"Reference/Utility Classes/AbstractIterator"},{"location":"reference/core/abstract-iterator/#class-signature","text":"Description A generic iterator very similar to the pattern used in Java. Generic Arguments - E [ any ] The type of element which will be returned during iteration over this object. Initial Version v0.1.0 Latest Version v1.5.0 1 abstract class AbstractIterator < E > implements IIterator < E >","title":"Class Signature"},{"location":"reference/core/abstract-iterator/#inheritance","text":"Extends Direct: none Indirect: none Implements Direct: IIterator : An interface representing the general form of an iterable class. Indirect: none Subclasses Direct: ArrayIterator : Add tagline. AsyncIterator : Add tagline. EmptyIterator : Add tagline. ObjectIterator : Add tagline. StringCharacterIterator : Add tagline. StringLineIterator : Add tagline. Indirect: none","title":"Inheritance"},{"location":"reference/core/abstract-iterator/#abstract-instance-method-signatures","text":"","title":"Abstract Instance Method Signatures"},{"location":"reference/core/abstract-iterator/#hasnext","text":"Description Returns true if this iterator has at least one more element that can be returned from next() . Returns [ boolean ] true if this iterator has at least one more element that can be returned from next() . Implements IIterator#hasNext 1 public abstract hasNext () : boolean","title":"#hasNext"},{"location":"reference/core/abstract-iterator/#next","text":"Description Returns the next element this AbstractIterator has to iterate over. Returns [ E ] The next element this AbstractIterator has. Implements IIterator#next 1 public abstract next () : E","title":"#next"},{"location":"reference/core/abstract-iterator/#concrete-instance-method-signatures","text":"","title":"Concrete Instance Method Signatures"},{"location":"reference/core/abstract-iterator/#foreachremaining","text":"Description Performs the specified action for all of the remaining elements in this AbstractIterator . Parameters - callback [ ( element : E ) => void ] The action to perform on the remaining elements of this AbstractIterator . Implements IIterator#forEachRemaining 1 public forEachRemaining ( callback : ( element : E ) => void ) : void","title":"#forEachRemaining"},{"location":"reference/core/abstract-iterator/#remove","text":"Description Removes and returns the last element returned by the next() method from the underlying data structure. Returns [ E | undefined ] The last element returned by the next() method. Implements IIterator#remove 1 public remove () : E | undefined","title":"#remove"},{"location":"reference/core/abstract-iterator/#reset","text":"Description Resets this AbstractIterator back to it's initial position, readying it to iterate over the underlying collection from the 'beginning' again. Implements IIterator#reset 1 public reset () : void","title":"#reset"},{"location":"reference/core/abstract-iterator/#symboliterator","text":"Implements IIterator#[Symbol.iterator] 1 public [ Symbol . iterator ]() : IterableIterator < E >","title":"#[Symbol.iterator]"},{"location":"reference/core/abstract-iterator/#getiterableiterator","text":"Implements IIterator#getIterableIterator 1 public getIterableIterator () : IterableIterator < E >","title":"#getIterableIterator"},{"location":"reference/core/i-iterator/","text":"Reference/Utility Classes/ IIterator \u00b6 An interface representing the general form of an iterable class. Interface Signature \u00b6 Description An interface representing the general form of an iterable class. Generic Arguments - E [ any ] The type of element which will be returned during iteration over this object. Initial Version v0.1.0 Latest Version v1.5.0 1 interface IIterator < E > Inheritance \u00b6 Extends Direct: none Indirect: none Implements Direct: none Indirect: none Implementations Direct: AbstractIterator : A generic iterator very similar to the pattern used in Java. Indirect: ArrayIterator : Add tagline. AsyncIterator : Add tagline. EmptyIterator : Add tagline. ObjectIterator : Add tagline. StringCharacterIterator : Add tagline. StringLineIterator : Add tagline. Interface Method Signatures \u00b6 #hasNext \u00b6 Description Returns true if this iterator has at least one more element that can be returned from next() . Returns [ boolean ] true if this iterator has at least one more element that can be returned from next() . 1 hasNext () : boolean #next \u00b6 Description Returns the next element this IIterator has to iterate over. Returns [ E ] The next element this IIterator has. 1 next () : E #forEachRemaining \u00b6 Description Performs the specified action for all of the remaining elements in this IIterator . Parameters - callback [ ( element : E ) => void ] The action to perform on the remaining elements of this IIterator . 1 forEachRemaining ( callback : ( element : E ) => void ) : void #remove \u00b6 Description Removes and returns the last element returned by the next() method from the underlying data structure. Returns [ E | undefined ] The last element returned by the next() method. 1 remove ? () : E | undefined #reset \u00b6 Description Resets this IIterator back to it's initial position, readying it to iterate over the underlying collection from the 'beginning' again. Note that this does not/should not modify the underlying data structure, meaning that any modifications will not be/should not be 'undone' by calling this method. 1 reset ? () : void #[Symbol.iterator] \u00b6 Description Returns an instance of an IterableIterator that allows this to be iterable using the baked-in for...of syntax, rather than more verbose iteration (i.e. using a while loop). Returns [ IterableIterator < E > ] An instance of an IterableIterator . See Iterators and Generators on MDN 1 [ Symbol . iterator ]() : IterableIterator < E > #getIterableIterator \u00b6 Description This method is simply an ease-of-understanding alias method for the [Symbol.iterator] method. Returns [ IterableIterator < E > ] An instance of an IterableIterator . See #[Symbol.iterator] 1 getIterableIterator () : IterableIterator < E >","title":"IIterator"},{"location":"reference/core/i-iterator/#referenceutility-classesiiterator","text":"An interface representing the general form of an iterable class.","title":"Reference/Utility Classes/IIterator"},{"location":"reference/core/i-iterator/#interface-signature","text":"Description An interface representing the general form of an iterable class. Generic Arguments - E [ any ] The type of element which will be returned during iteration over this object. Initial Version v0.1.0 Latest Version v1.5.0 1 interface IIterator < E >","title":"Interface Signature"},{"location":"reference/core/i-iterator/#inheritance","text":"Extends Direct: none Indirect: none Implements Direct: none Indirect: none Implementations Direct: AbstractIterator : A generic iterator very similar to the pattern used in Java. Indirect: ArrayIterator : Add tagline. AsyncIterator : Add tagline. EmptyIterator : Add tagline. ObjectIterator : Add tagline. StringCharacterIterator : Add tagline. StringLineIterator : Add tagline.","title":"Inheritance"},{"location":"reference/core/i-iterator/#interface-method-signatures","text":"","title":"Interface Method Signatures"},{"location":"reference/core/i-iterator/#hasnext","text":"Description Returns true if this iterator has at least one more element that can be returned from next() . Returns [ boolean ] true if this iterator has at least one more element that can be returned from next() . 1 hasNext () : boolean","title":"#hasNext"},{"location":"reference/core/i-iterator/#next","text":"Description Returns the next element this IIterator has to iterate over. Returns [ E ] The next element this IIterator has. 1 next () : E","title":"#next"},{"location":"reference/core/i-iterator/#foreachremaining","text":"Description Performs the specified action for all of the remaining elements in this IIterator . Parameters - callback [ ( element : E ) => void ] The action to perform on the remaining elements of this IIterator . 1 forEachRemaining ( callback : ( element : E ) => void ) : void","title":"#forEachRemaining"},{"location":"reference/core/i-iterator/#remove","text":"Description Removes and returns the last element returned by the next() method from the underlying data structure. Returns [ E | undefined ] The last element returned by the next() method. 1 remove ? () : E | undefined","title":"#remove"},{"location":"reference/core/i-iterator/#reset","text":"Description Resets this IIterator back to it's initial position, readying it to iterate over the underlying collection from the 'beginning' again. Note that this does not/should not modify the underlying data structure, meaning that any modifications will not be/should not be 'undone' by calling this method. 1 reset ? () : void","title":"#reset"},{"location":"reference/core/i-iterator/#symboliterator","text":"Description Returns an instance of an IterableIterator that allows this to be iterable using the baked-in for...of syntax, rather than more verbose iteration (i.e. using a while loop). Returns [ IterableIterator < E > ] An instance of an IterableIterator . See Iterators and Generators on MDN 1 [ Symbol . iterator ]() : IterableIterator < E >","title":"#[Symbol.iterator]"},{"location":"reference/core/i-iterator/#getiterableiterator","text":"Description This method is simply an ease-of-understanding alias method for the [Symbol.iterator] method. Returns [ IterableIterator < E > ] An instance of an IterableIterator . See #[Symbol.iterator] 1 getIterableIterator () : IterableIterator < E >","title":"#getIterableIterator"},{"location":"reference/utility-classes/array-iterator/","text":"Reference/Utility Classes/ ArrayIterator \u00b6 A utility class for getting a full iter-over iteration context from an otherwise primitive array. How-To/Usage Guide Find a how-to/usage guide for the ArrayIterator here class, or navigate to it via the 'The Basics' tab. Class Signature \u00b6 Description A utility class for getting a full iter-over iteration context from an otherwise primitive array. Generic Arguments - E [ any ] The type of element contained in the underlying array. Initial Version v0.1.0 Latest Version v2.1.0 1 abstract class AbstractIterator < E > implements IIterator < E | undefined > Inheritance \u00b6 Extends Direct: AbstractIterator : A generic iterator very similar to the pattern used in Java. Indirect: none Implements Direct: IIterator : An interface representing the general form of an iterable class. Indirect: none Subclasses Direct: none Indirect: none Instance Method Signatures \u00b6 #hasNext \u00b6 Description Returns true if this iterator has at least one more element that can be returned from next() . Returns [ boolean ] true if this iterator has at least one more element that can be returned from next() . Overrides AbstractIterator#hasNext 1 public hasNext () : boolean #next \u00b6 Description Returns the next element of the underlying array, or undefined if there are no more elements to consume. Returns [ E | undefined ] The next element of the underlying array, or undefined if there are no more elements to consume. Overrides AbstractIterator#next 1 public next () : E | undefined #remove \u00b6 Description Removes and returns the last element returned by the next() method from the underlying array. Returns [ E | undefined ] The last element returned by the next() method. Overrides AbstractIterator#remove 1 public remove () : E | undefined #reset \u00b6 Description Resets this iterator back to the first element of the underlying array. Overrides AbstractIterator#reset 1 public reset () : void","title":"ArrayIterator"},{"location":"reference/utility-classes/array-iterator/#referenceutility-classesarrayiterator","text":"A utility class for getting a full iter-over iteration context from an otherwise primitive array. How-To/Usage Guide Find a how-to/usage guide for the ArrayIterator here class, or navigate to it via the 'The Basics' tab.","title":"Reference/Utility Classes/ArrayIterator"},{"location":"reference/utility-classes/array-iterator/#class-signature","text":"Description A utility class for getting a full iter-over iteration context from an otherwise primitive array. Generic Arguments - E [ any ] The type of element contained in the underlying array. Initial Version v0.1.0 Latest Version v2.1.0 1 abstract class AbstractIterator < E > implements IIterator < E | undefined >","title":"Class Signature"},{"location":"reference/utility-classes/array-iterator/#inheritance","text":"Extends Direct: AbstractIterator : A generic iterator very similar to the pattern used in Java. Indirect: none Implements Direct: IIterator : An interface representing the general form of an iterable class. Indirect: none Subclasses Direct: none Indirect: none","title":"Inheritance"},{"location":"reference/utility-classes/array-iterator/#instance-method-signatures","text":"","title":"Instance Method Signatures"},{"location":"reference/utility-classes/array-iterator/#hasnext","text":"Description Returns true if this iterator has at least one more element that can be returned from next() . Returns [ boolean ] true if this iterator has at least one more element that can be returned from next() . Overrides AbstractIterator#hasNext 1 public hasNext () : boolean","title":"#hasNext"},{"location":"reference/utility-classes/array-iterator/#next","text":"Description Returns the next element of the underlying array, or undefined if there are no more elements to consume. Returns [ E | undefined ] The next element of the underlying array, or undefined if there are no more elements to consume. Overrides AbstractIterator#next 1 public next () : E | undefined","title":"#next"},{"location":"reference/utility-classes/array-iterator/#remove","text":"Description Removes and returns the last element returned by the next() method from the underlying array. Returns [ E | undefined ] The last element returned by the next() method. Overrides AbstractIterator#remove 1 public remove () : E | undefined","title":"#remove"},{"location":"reference/utility-classes/array-iterator/#reset","text":"Description Resets this iterator back to the first element of the underlying array. Overrides AbstractIterator#reset 1 public reset () : void","title":"#reset"},{"location":"reference/utility-classes/async-iterator/","text":"Reference/Utility Classes/ AsyncIterator \u00b6 How-To/Usage Guide Find a how-to/usage guide for the AsyncIterator here class, or navigate to it via the 'The Basics' tab.","title":"AsyncIterator"},{"location":"reference/utility-classes/async-iterator/#referenceutility-classesasynciterator","text":"How-To/Usage Guide Find a how-to/usage guide for the AsyncIterator here class, or navigate to it via the 'The Basics' tab.","title":"Reference/Utility Classes/AsyncIterator"},{"location":"reference/utility-classes/empty-iterator/","text":"Reference/Utility Classes/ EmptyIterator \u00b6 An empty iterator. How-To/Usage Guide Find a how-to/usage guide for the EmptyIterator here class, or navigate to it via the 'The Basics' tab. Class Signature \u00b6 Description: An empty iterator. Initial Version: v0.1.0 Latest Version: v2.0.0 1 class EmptyIterator extends AbstractIterator < undefined > Inheritance \u00b6 Extends Direct: AbstractIterator : A generic iterator very similar to the pattern used in Java. Indirect: none Implements Direct: none Indirect: IIterator : An interface representing the general form of an iterable class. Subclasses Direct: none Indirect: none Instance Method Signatures \u00b6 #hasNext \u00b6 Implements AbstractIterator#hasNext 1 public hasNext () : false #next \u00b6 Implements AbstractIterator#next 1 public next () : undefined #remove \u00b6 Overrides AbstractIterator#remove 1 public remove () : undefined #reset \u00b6 Overrides AbstractIterator#reset 1 public reset () : void","title":"EmptyIterator"},{"location":"reference/utility-classes/empty-iterator/#referenceutility-classesemptyiterator","text":"An empty iterator. How-To/Usage Guide Find a how-to/usage guide for the EmptyIterator here class, or navigate to it via the 'The Basics' tab.","title":"Reference/Utility Classes/EmptyIterator"},{"location":"reference/utility-classes/empty-iterator/#class-signature","text":"Description: An empty iterator. Initial Version: v0.1.0 Latest Version: v2.0.0 1 class EmptyIterator extends AbstractIterator < undefined >","title":"Class Signature"},{"location":"reference/utility-classes/empty-iterator/#inheritance","text":"Extends Direct: AbstractIterator : A generic iterator very similar to the pattern used in Java. Indirect: none Implements Direct: none Indirect: IIterator : An interface representing the general form of an iterable class. Subclasses Direct: none Indirect: none","title":"Inheritance"},{"location":"reference/utility-classes/empty-iterator/#instance-method-signatures","text":"","title":"Instance Method Signatures"},{"location":"reference/utility-classes/empty-iterator/#hasnext","text":"Implements AbstractIterator#hasNext 1 public hasNext () : false","title":"#hasNext"},{"location":"reference/utility-classes/empty-iterator/#next","text":"Implements AbstractIterator#next 1 public next () : undefined","title":"#next"},{"location":"reference/utility-classes/empty-iterator/#remove","text":"Overrides AbstractIterator#remove 1 public remove () : undefined","title":"#remove"},{"location":"reference/utility-classes/empty-iterator/#reset","text":"Overrides AbstractIterator#reset 1 public reset () : void","title":"#reset"},{"location":"reference/utility-classes/object-iterator/","text":"Reference/Utility Classes/ ObjectIterator \u00b6 An iterator that iterates over the keys of an object. How-To/Usage Guide Find a how-to/usage guide for the ObjectIterator here class, or navigate to it via the 'The Basics' tab. Class Signature \u00b6 Description An iterator that iterates over the keys of an object. Generic Arguments - T [ StringIndexedObject ] The type of the object that is being iterated over. Initial Version v0.1.0 Latest Version v2.0.0 1 2 class ObjectIterator < T extends StringIndexedObject > extends AbstractIterator < KeyValuePair < keyof T , ValueOf < T >> | undefined > Inheritance \u00b6 Extends Direct: AbstractIterator : A generic iterator very similar to the pattern used in Java. Indirect: none Implements Direct: none Indirect: IIterator : An interface representing the general form of an iterable class. Subclasses Direct: none Indirect: none Instance Method Signatures \u00b6 #hasNext \u00b6 Description Returns true if this iterator has at least one more element that can be returned from next() . Returns [ boolean ] true if this iterator has at least one more element that can be returned from next() . Overrides AbstractIterator#hasNext 1 public hasNext () : boolean #next \u00b6 1 public next () : KeyValuePair < keyof T , ValueOf < T >> | undefined #remove \u00b6 1 public remove () : KeyValuePair < keyof T , ValueOf < T >> | undefined #reset \u00b6 1 public reset () : void","title":"ObjectIterator"},{"location":"reference/utility-classes/object-iterator/#referenceutility-classesobjectiterator","text":"An iterator that iterates over the keys of an object. How-To/Usage Guide Find a how-to/usage guide for the ObjectIterator here class, or navigate to it via the 'The Basics' tab.","title":"Reference/Utility Classes/ObjectIterator"},{"location":"reference/utility-classes/object-iterator/#class-signature","text":"Description An iterator that iterates over the keys of an object. Generic Arguments - T [ StringIndexedObject ] The type of the object that is being iterated over. Initial Version v0.1.0 Latest Version v2.0.0 1 2 class ObjectIterator < T extends StringIndexedObject > extends AbstractIterator < KeyValuePair < keyof T , ValueOf < T >> | undefined >","title":"Class Signature"},{"location":"reference/utility-classes/object-iterator/#inheritance","text":"Extends Direct: AbstractIterator : A generic iterator very similar to the pattern used in Java. Indirect: none Implements Direct: none Indirect: IIterator : An interface representing the general form of an iterable class. Subclasses Direct: none Indirect: none","title":"Inheritance"},{"location":"reference/utility-classes/object-iterator/#instance-method-signatures","text":"","title":"Instance Method Signatures"},{"location":"reference/utility-classes/object-iterator/#hasnext","text":"Description Returns true if this iterator has at least one more element that can be returned from next() . Returns [ boolean ] true if this iterator has at least one more element that can be returned from next() . Overrides AbstractIterator#hasNext 1 public hasNext () : boolean","title":"#hasNext"},{"location":"reference/utility-classes/object-iterator/#next","text":"1 public next () : KeyValuePair < keyof T , ValueOf < T >> | undefined","title":"#next"},{"location":"reference/utility-classes/object-iterator/#remove","text":"1 public remove () : KeyValuePair < keyof T , ValueOf < T >> | undefined","title":"#remove"},{"location":"reference/utility-classes/object-iterator/#reset","text":"1 public reset () : void","title":"#reset"},{"location":"reference/utility-classes/string-character-iterator/","text":"Reference/Utility Classes/ StringCharacterIterator \u00b6 An iterator that iterates over the characters in a string. How-To/Usage Guide Find a how-to/usage guide for the StringCharacterIterator here class, or navigate to it via the 'The Basics' tab. Class Signature \u00b6 1 class StringCharacterIterator extends AbstractIterator < string > Instance Method Signatures \u00b6 #hasNext \u00b6 1 public hasNext () : boolean #next \u00b6 1 public next () : string #remove \u00b6 1 public remove () : string | undefined #reset \u00b6 1 public reset () : void","title":"StringCharacterIterator"},{"location":"reference/utility-classes/string-character-iterator/#referenceutility-classesstringcharacteriterator","text":"An iterator that iterates over the characters in a string. How-To/Usage Guide Find a how-to/usage guide for the StringCharacterIterator here class, or navigate to it via the 'The Basics' tab.","title":"Reference/Utility Classes/StringCharacterIterator"},{"location":"reference/utility-classes/string-character-iterator/#class-signature","text":"1 class StringCharacterIterator extends AbstractIterator < string >","title":"Class Signature"},{"location":"reference/utility-classes/string-character-iterator/#instance-method-signatures","text":"","title":"Instance Method Signatures"},{"location":"reference/utility-classes/string-character-iterator/#hasnext","text":"1 public hasNext () : boolean","title":"#hasNext"},{"location":"reference/utility-classes/string-character-iterator/#next","text":"1 public next () : string","title":"#next"},{"location":"reference/utility-classes/string-character-iterator/#remove","text":"1 public remove () : string | undefined","title":"#remove"},{"location":"reference/utility-classes/string-character-iterator/#reset","text":"1 public reset () : void","title":"#reset"},{"location":"reference/utility-classes/string-line-iterator/","text":"Reference/Utility Classes/ StringLineIterator \u00b6 An iterator that iterates over the lines in a string. How-To/Usage Guide Find a how-to/usage guide for the StringLineIterator here class, or navigate to it via the 'The Basics' tab. Class Signature \u00b6 1 class StringLineIterator extends AbstractIterator < string > Instance Method Signatures \u00b6 #hasNext \u00b6 1 public hasNext () : boolean #next \u00b6 1 public next () : string #remove \u00b6 1 public remove () : string | undefined #reset \u00b6 1 public reset () : void","title":"StringLineIterator"},{"location":"reference/utility-classes/string-line-iterator/#referenceutility-classesstringlineiterator","text":"An iterator that iterates over the lines in a string. How-To/Usage Guide Find a how-to/usage guide for the StringLineIterator here class, or navigate to it via the 'The Basics' tab.","title":"Reference/Utility Classes/StringLineIterator"},{"location":"reference/utility-classes/string-line-iterator/#class-signature","text":"1 class StringLineIterator extends AbstractIterator < string >","title":"Class Signature"},{"location":"reference/utility-classes/string-line-iterator/#instance-method-signatures","text":"","title":"Instance Method Signatures"},{"location":"reference/utility-classes/string-line-iterator/#hasnext","text":"1 public hasNext () : boolean","title":"#hasNext"},{"location":"reference/utility-classes/string-line-iterator/#next","text":"1 public next () : string","title":"#next"},{"location":"reference/utility-classes/string-line-iterator/#remove","text":"1 public remove () : string | undefined","title":"#remove"},{"location":"reference/utility-classes/string-line-iterator/#reset","text":"1 public reset () : void","title":"#reset"}]}